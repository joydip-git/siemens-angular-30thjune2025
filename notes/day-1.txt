JavaScript:

JS interpreter/compiler:
	chrome: V8
	safari: JS Core (Indigo)
	firefox: Spidermonkey
	edge: chromium (v8)


Node JS => JS runtime built at the top of the V8 engine
	   Its a server side framework
    	   authored by Ryan Dahl in 2009

JavaScript:
	data types:
	number, bool, string, object, function

	var x = 10
	x = 'Joydip'

guided by ECMA using a guideline language: ECMAScript
ES 1.0 => ES 6.0 (2015)
a. let and const keywords

JS compilation and execution:
1. preparation stage:
	variable and/or function declaration
	Note: function declarations are hoisted, NOT the function expressions.

2. execution stage:
	method calls, assignments etc. are taken care of

TypeScript:
	a. strict data typing
	b. static type checking
	c. extra data types
	d. extra features
		- creating custom types
		- using generic
		- ...

TS is a development level language. there is no TS engine in browser or any runtime
TS => vanilla JS

package.json => list of installed packages, version, name, author, description, scripts etc. related values
to create => >npm init --yes


Typescript transpiler configuration file: tsconfig.json
command: app-dir-path>.\node_modules\.bin\tsc --init

package installation:
local:
app-dir>npm i <pakage-name> [-D]

path: app-dir>node_modules

global:
>npm i <pakage-name> --location=global
path: C:\Users\<user-name>\AppData\Roaming\npm

Angular CLI tool
install globally
>npm i @angular/cli --location=global

swiggy.com/index => resturants

<html>
	<body>
		<app-root></app-root>	
	</body>
</html>

root.html

root.ts

navbar.html
<nav>
	<button>...
	<button>...
</nav>

contentpanel.html
<nav>
	<button>...
	<button>...
</nav>
contentpanel.ts


resturants.html


design/template/view + code + metadata

binding:
	a. data binding: passing data and binding the same to an UI element
	syntax: {{}}, []
	b. event binding: passing data from UI to a method in the code (as a result of some event)
	syntax: <html-element (event)="method-in-code(args)">


Angular:
	front-end UI development framework
	it is a SPA
	built upon series of components
	passing data between the code and the view/template of the same component
	separation of concerns	
	routing feature
	DI facility
	form handling with model binding
	HTTP requests (HttpClient)
	

component	class		@Component
service		class		@Injectable
pipe		class		@Pipe
directive	class		@Directive
module		class		@NgModule

...
class DataService
{
	private _http:HttpClient
	constructor(http:HttpClient){ this._http = http;}
	getData():string[]{
		this._http.post/put/delete/get
		return [];
	}
}

@Component({
	selector:'app-data'
})
class DataComponent{
	private ds:DataService;
	data:string[];
	
	constructor(_ds:DataService){
		this.ds = _ds;
	}

	showData(){
		this.data = this.ds.getData()
	}
}

path: /myapp/index => component: HomeComponent







	